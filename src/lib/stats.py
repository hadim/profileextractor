#-*- coding: utf-8 -*-

# stats.py

# Copyright (c) 2011, see AUTHORS
# All rights reserved.

# This file is part of ProfileExtractor.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:

# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# Neither the name of the ProfileExtractor nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#-*- coding: utf-8 -*-

import math
from decimal import *

class Stats():
    """
    """
    
    def __init__(self, array = [], convertToFloat = True):
        """
        """

        if convertToFloat:
            self.array = self.toFloat(array)
        else:
            self.array = array
            
        self.sum = Decimal(str(sum(self.array)))
        self.mean = None
        self.median = None
        self.variance = None
        self.std = None
        self.len = Decimal(str(len(self.array)))

        self.getMean()
        self.getMedian()
        self.getVariance()
        self.getStd()

    def dict(self):
        """
        """

        return { 'sum' : self.to_str(self.sum),
                 'mean' : self.to_str(self.mean),
                 'median' : self.to_str(self.median),
                 'total' : self.to_str(self.len),
                 'variance' : self.to_str(self.variance),
                 'std' : self.to_str(self.std) }

    def to_str(self, decimal):
        """
        """

        return str(decimal.quantize(Decimal('1.0000000')))
                 
    def toFloat(self, array):
        """
        """

        tmp = []
        for i in array:
            tmp.append(Decimal(str(i)))

        return tmp

    def __len__(self):
        """
        """

        return len(self.array)

    def getMean(self):
        """
        """

        if self.mean:
            return self.mean

        if len(self.array) == 0:
            self.mean = Decimal(0)
        else:
            self.mean = Decimal(sum(self.array) / self.len)

        return self.mean

    def getMedian(self):
        """
        """

        if self.median:
            return self.median

        if self.len == 0:
            self.median = Decimal(0)
            return self.median

        array = sorted(self.array)
        i = self.len
        
        if not i % 2:
            self.median = Decimal(array[ (int(i) / 2) - 1] + array[int(i) / 2]) / Decimal(2)
        else:
            self.median = Decimal(array[int(i) / 2])

        return self.median

    def getVariance(self):
        """
        """

        if self.variance:
            return self.variance

        if self.len == 0:
            self.variance = Decimal(0)
            return self.variance

        self.getMean()

        n = 0
        sum1 = 0
        for x in self.array:
            n = n + 1
            sum1 = sum1 + x

        sum2 = 0
        sum3 = 0
        for x in self.array:
            sum2 = sum2 + (x - self.mean)**2
            sum3 = sum3 + (x - self.mean)

        try:
            self.variance = Decimal((sum2 - sum3**2/n)/(n - 1))
        except ZeroDivisionError:
            self.variance = Decimal(0)
        except  InvalidOperation:
            self.variance = Decimal(0)

        return self.variance

    def getStd(self):
        """
        """

        if self.std:
            return self.std

        self.getVariance()
        self.std = self.variance.sqrt()

        return self.std
        

if __name__ == '__main__':

    v = [ 0.016747542068900001, 0.017228560311899999, 0.0157113057962, 0.0131749150878, 0.014870262730699999, 0.0123326159559, 0.015023389639799999, 0.018790842409299999, 0.030534960896699999, 0.014348639266199999, 0.031688684070999999, 0.020476697233399999, 0.0206642512911, 0.014698488496999999, 0.017454770865899999, 0.019187993782799999, 0.0161826402242, 0.013883905094000001, 0.014920671222600001, 0.020134882232600002, 0.018918022628399998, 0.020353413434899999, 0.016861046139, 0.035211698408400001, 0.029575342947, 0.0213939892623, 0.0147082364725, 0.035841252747099997, 0.018489307644099999, 0.0130356929007, 0.018284463482799999, 0.013838381520800001, 0.013295157954000001, 0.022783065263500001, 0.027664993201799999, 0.0198651852715, 0.017638085222699999, 0.010197246663899999, 0.011904029855500001, 0.0107318671244, 0.014242519351, 0.0140569676808, 0.0150562318133, 0.0151019792403, 0.012143750629, 0.017070213801, 0.032210314714699997, 0.0191304165619, 0.0150764603893, 0.0192141965845, 0.017212047597900001, 0.014534078932699999, 0.014031189265899999, 0.0136544315592, 0.019781404891300002, 0.0141291672632, 0.0201219609525, 0.0253581189192, 0.014141940431499999, 0.018424732601299999, 0.0182817888245, 0.011854473284299999, 0.010495538552399999, 0.0186184910728, 0.018963293696699999, 0.0175940856582, 0.0125689111823, 0.019203454662100002, 0.016875003596500002, 0.014388330300599999, 0.0113957071675, 0.013543766821300001, 0.014827181889799999, 0.0111447611642, 0.014348491160100001, 0.0139475992099, 0.0122817798767, 0.014413928225999999, 0.012560021805, 0.0151215648487, 0.012937467937400001, 0.016521251677600001, 0.011736705271, 0.016638578690699998, 0.0128026180701, 0.0178239961212, 0.018957347088800001, 0.017106961057600002, 0.0126818535145, 0.011961633575800001, 0.016254443035399999, 0.014445620850799999, 0.0128390983939, 0.0138474571691, 0.012751679568299999, 0.011682226781500001, 0.012057940066699999, 0.015638277498300001, 0.014435006903400001, 0.017449159849000001, 0.0117930571617, 0.017039641954000002, 0.0177426829245, 0.0117390720385, 0.0137125066711, 0.012907368232600001, 0.0096311773566799992, 0.016291865042299999, 0.0120633210533, 0.0087483293222500001, 0.015009834373, 0.013958331158199999, 0.0139242712819, 0.0136044934312, 0.010142394975499999, 0.014186785821100001, 0.014160432950300001, 0.016725798407999998, 0.010473474955300001, 0.015693396603700002, 0.0147695913455, 0.014512359985999999, 0.0146511187163, 0.012783849282500001, 0.018878111280800001, 0.015040638378600001, 0.032123169116400001, 0.016018493457199998, 0.019688008566799999, 0.016982040401300001, 0.015808452061100001, 0.018606116136300001, 0.020155784879999999, 0.0151157861751, 0.015945437476, 0.0102671798501, 0.0072369502109899996, 0.0090674624383000006, 0.0118818112053, 0.0131448147878, 0.0156795767022, 0.015918690750199999, 0.018003865583599999, 0.0188250990385, 0.0119877594482, 0.0114876576192, 0.0147764697981, 0.011073003619900001, 0.0118159820404, 0.0123901151174, 0.0141395554612, 0.0089395403432099996, 0.0138683736153, 0.017709274511399999, 0.013077025143399999, 0.0134005399823, 0.011403969051200001, 0.0147453942756, 0.011596871706600001, 0.020342478547600001, 0.014702623096200001, 0.0107621737884, 0.016737573727799999, 0.0145646048107, 0.012242507039000001, 0.0112039026657, 0.015259946235699999, 0.013482448552899999, 0.020616677687700001, 0.020895690903099999, 0.017742396906500001, 0.0155079322197, 0.018814851573400002, 0.0187359064254, 0.022227732794100001, 0.027406002031, 0.019936768946300001, 0.0149876802419, 0.0140812360347, 0.017750454582900001, 0.0126689460429, 0.018510828885, 0.018791714510600001, 0.0249509756487, 0.018107811560399999, 0.021443940460200001, 0.013170533231900001, 0.0156102148221, 0.017624495967300001, 0.017281420193999999, 0.016333221633500001, 0.0249172798593, 0.023067836531299998, 0.018808039961999999, 0.017142318073099998, 0.020312568928799998, 0.0175623481793, 0.026070692968499998, 0.010770074425500001, 0.018639445223500001, 0.032143014377100002, 0.0203720098642, 0.01542694111, 0.024189632853099999, 0.023713681602800001, 0.026989132657700001, 0.013175666163, 0.0238497822608, 0.033506398273800003, 0.022438096981200001, 0.031682934393699999, 0.0142488433909, 0.018997869359799999, 0.0223439299396, 0.0143327110832, 0.015865073784999999, 0.0205876783626, 0.018087057812800001, 0.013303858260100001, 0.016235711774099999, 0.017535356627299999, 0.013226431174799999, 0.0126189013375, 0.015879593751399999, 0.0177949383505, 0.0150921404014, 0.016590242678400001, 0.017455858700599999, 0.011865305906799999, 0.0211837377663, 0.017738308117300001, 0.029192239815699999, 0.019165944020399998, 0.016254866964400001, 0.015925903759999999, 0.0244855183917, 0.019765916967900001, 0.0139992105965, 0.0180636252952, 0.023284774394899999, 0.011064229779599999, 0.0291894234191, 0.0238127109659, 0.0163607980124, 0.025336164671399999, 0.022839739489500001, 0.019573036831799999, 0.0141666408609, 0.011088003727200001, 0.011488036164400001, 0.017573441851900001, 0.016757645952500001, 0.013989534222600001, 0.0147113281002, 0.0102958415954, 0.0129995959429, 0.011348162880599999, 0.016691359018, 0.011113924277700001, 0.0119249062916, 0.017153765703999999, 0.014972856103999999, 0.016020855062699998, 0.0155919342898, 0.0124077828272, 0.0112860239629, 0.0142679472838, 0.018702036449700001, 0.012666579602300001, 0.021527801571, 0.013183872513300001, 0.022777843758199998, 0.0178570264317, 0.011750967698200001, 0.018289729129800002, 0.016983687288299999, 0.017659658024800001, 0.0099863164928500007, 0.0123252021894, 0.0161765459893, 0.014686527335400001, 0.0122222857373, 0.011773455769099999, 0.019265934507899998, 0.014399208084299999, 0.0200610059993, 0.013323174556, 0.0163662995802, 0.0125101062366, 0.0100332814237, 0.015430125980999999, 0.019558649701700001, 0.014841224419299999, 0.0138849172779, 0.0198871048258, 0.0128051224972, 0.024409926085900001, 0.015555677301199999, 0.017237656133, 0.0204269473679, 0.0115064933996, 0.0121295877611, 0.018785285617099998, 0.013370545417399999, 0.0111264537174, 0.0125444214041, 0.0132349527493 ]

    stats = Stats(v).dict()

    print stats['mean']
    print stats['median']
    print stats['variance']
    print stats['std']
